{
	"extends": "@adonisjs/tsconfig/tsconfig.app.json",
	"compilerOptions": {
		"target": "ESNext",
		"module": "NodeNext",
		"lib": ["ESNext"],
		// Disable emitting comments
		"removeComments": true,
		// Allow 'import x from y' when a module doesn't have a default export
		"allowSyntheticDefaultImports": true,
		// Check for class properties that are declared but not set in the constructor
		"strictPropertyInitialization": true,
		// Enable experimental support for TC39 stage 2 draft decorators
		"experimentalDecorators": true,
		// Enable error reporting for expressions and declarations with an implied `any` type
		"noImplicitAny": true,
		// Check that the arguments for `bind`, `call`, and `apply` methods match the original function
		"strictBindCallApply": true,
		// When assigning functions, check to ensure parameters and the return values are subtype-compatible
		"strictFunctionTypes": true,
		// Enable error reporting when `this` is given the type `any`
		"noImplicitThis": true,
		// Generate .d.ts files from TypeScript and JavaScript files in your project
		"declaration": false,
		// Create source map files for emitted JavaScript files
		"sourceMap": true,
		// Emit design-type metadata for decorated declarations in source files
		"emitDecoratorMetadata": true,
		// Allow importing TypeScript files using their native extension (.ts(x)).
		"allowImportingTsExtensions": true,
		// Enable JSON imports.
		"resolveJsonModule": true,
		// Ensure that each file can be transpiled without relying on other imports.
		"isolatedModules": true,
		// Astro directly run TypeScript code, no transpilation needed.
		"noEmit": true,
		// Report an error when importing a file using a casing different from another import of the same file.
		"forceConsistentCasingInFileNames": true,
		// Properly support importing CJS modules in ESM
		"esModuleInterop": true,
		// Skip typechecking libraries and .d.ts files
		"skipLibCheck": true,
		// Enable strict mode. This enables a few options at a time, see https://www.typescriptlang.org/tsconfig#strict for a list.
		"strict": true,
		// Report errors for fallthrough cases in switch statements
		"noFallthroughCasesInSwitch": true,
		// Force functions designed to override their parent class to be specified as `override`.
		"noImplicitOverride": true,
		// Force functions to specify that they can return `undefined` if a possible code path does not return a value.
		"noImplicitReturns": true,
		// Report an error when a variable is declared but never used.
		"noUnusedLocals": true,
		// Report an error when a parameter is declared but never used.
		"noUnusedParameters": true,
		// Force the usage of the indexed syntax to access fields declared using an index signature.
		"noUncheckedIndexedAccess": true,
		// Report an error when the value `undefined` is given to an optional property that doesn't specify `undefined` as a valid value.
		"exactOptionalPropertyTypes": true,
		// Report an error for unreachable code instead of just a warning.
		"allowUnreachableCode": false,
		// Report an error for unused labels instead of just a warning.
		"allowUnusedLabels": false,
		// Disallow JavaScript files from being imported
		"allowJs": false,
		// Enforces using indexed accessors for keys declared using an indexed type.
		"noPropertyAccessFromIndexSignature": true,
		// Explicit handling of null and undefined values.
		"strictNullChecks": true,
		// Use the newish `declare` keyword on class properties.
		"useDefineForClassFields": true,
		"rootDir": "./",
		"outDir": "./build",
		"paths": {
			"#config/*": ["./config/*.js"],
			"#database/*": ["./database/*.js"],
			"#domains/*": ["./domains/*.js"],
			"#shared/*": ["./shared/*.js"],
			"#start/*": ["./start/*.js"],
			"#tests/*": ["./tests/*.js"],
			"#tmp/*": ["./tmp/*"],
			"#types/*": ["./types/*.js"]
		},
		"types": ["@types/node"]
	},
	"exclude": ["node_modules", "build"]
}
